name: Python Security and SBOM Workflow

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install Bandit
        run: pip install bandit

      - name: Run Bandit security scan
        id: bandit_scan
        run: |
          bandit -r . -lll --exit-zero --format json --output bandit_results.json
          if grep -q '"SEVERITY": "HIGH"' bandit_results.json; then
            echo "CRITICAL_ISSUE_FOUND=true" >> $GITHUB_ENV
          fi

      - name: Comment on PR if critical issue found
        if: env.CRITICAL_ISSUE_FOUND == 'true'
        uses: actions/github-script@v5
        with:
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: 'Block - Critical vulnerability identified.'
            })
            core.setFailed('Blocking PR due to critical vulnerabilities.')

      - name: Comment on PR if no critical issues
        if: env.CRITICAL_ISSUE_FOUND != 'true'
        uses: actions/github-script@v5
        with:
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: 'Successful - No critical vulnerabilities found.'
            })

  sbom-and-dependency-scan:
    needs: security-scan
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Example step for SBOM generation - adjust according to your tooling
      - name: Generate SBOM
        run: echo "SBOM generation step here"

      # Example step for dependency scanning - adjust according to your tooling
      - name: Dependency Scanning
        run: echo "Dependency scanning step here"

      # Upload SBOM as an artifact (adjust the path to where your SBOM is generated)
      - name: Upload SBOM as artifact
        uses: actions/upload-artifact@v2
        with:
          name: SBOM
          path: path/to/sbom.json
